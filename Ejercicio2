import java.util.Random;
import java.util.Scanner;

public class ejercicio2 {

    private  ejercicio2(){}
    /**
     * Method that returns a boolean if the password contains at least
     * a digit, a lowercase letter, an uppercase letter and a symbol,
     * besides the length of the password has to be between minLen and maxLen
     * @param minLen minimum length
     * @param maxLen maximum length
     * @param password password to check
     * @return true if the password has the conditions, otherwise false
     */
    public static boolean isSafePassword(int minLen, int maxLen, String password){
        if (maxLen < minLen)
            return false;
        if (! (password.length() >= minLen && password.length() <= maxLen))
            return false;
        if (! password.matches(".*[a-záéíóúüñ].*"))
            return false;
        if (! password.matches(".*[A-ZÁÉÍÓÚÜÑ].*"))
            return false;
        //if (! password.matches(".*[\\d].*"))
        if (! password.matches(".*[0-9].*"))
            return false;
        if (! password.matches(".*[^a-zA-ZáéíóúüÁÉÍÓÚÜñÑ0-9].*"))
            return false;
        return true;
    }

    /**
     * Method that returns a boolean if the password contains at least
     *  a digit, a lowercase letter, an uppercase letter and a symbol,
     *  besides the length of the password has to be between 8 and 12,
     *  values included
     * @param password password to check
     * @return true if the password has the conditions, otherwise false
     */
    public static boolean isSafePasswordDefault(String password) {
        if (password.length() < 8) {
            System.out.printf("%s no es segura%n", password);

        }
        boolean numero = false, simbolo = false, mayuscula = false, minuscula = false;
        for (int i = 0; i < password.length(); i++) {
            if (Character.isDigit(password.charAt(i)))
                numero = true;
            else if (Character.isLowerCase(password.charAt(i)))
                minuscula = true;
            else if (Character.isUpperCase(password.charAt(i)))
                mayuscula = true;
            else
                simbolo = true;
        }
        return isSafePassword(8, 12, password);
    }

    //FALTA DOCUMENTAR
    public static boolean checkPhoneNumber(String number) {
        return number.matches("[679][0-9]{8}");
    }

    //FALTA DOCUMENTAR
    public static boolean isValideID(String id) {
        id = id.toLowerCase();
        if (! id.matches("[0-9]{8}[a-hj-np-tv-z]")) {
            return false;
        }
        char letraID = id.charAt(id.length() - 1);
        String sNumero = id.substring(0 , id.length() - 1);
        int iNumero = Integer.parseInt(sNumero);
        int resto = iNumero % 23;
        //char[] datos = {'t', 'r', ...};
        String datos = "trwagmyfpdxbnjzsqvhlcke";
        char letraDatos = datos.charAt(resto);
        return letraDatos == letraID;
    }
    public static String createSafePassword (int length){
        if (length < 8)
            return null;
        final String  FUENTE_CARACTERES =
                "abcdefghijklmnñopqrstuvwxyzABCDEFEGHIJKLMNÑOPQRSTUVWXYZ¿?()=@.:,;!¡&{}012456789";
        StringBuilder stringBuilder = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            int posicion = random.nextInt(FUENTE_CARACTERES.length());
            char caracter = FUENTE_CARACTERES.charAt(posicion);
            stringBuilder.append(caracter);
        }
        return stringBuilder.toString();
    }

    public static Integer TestClaveSegura(int length) {
        Scanner sc = new Scanner(System.in);
        int numeroContrasenas = sc.nextInt();
        System.out.println("Introduce el numero de contraseñas que quieres generar:");

        return null;
    }

    public static void main(String[] args) {
        System.out.println(isSafePasswordDefault(createSafePassword(8)));
        System.out.println(createSafePassword(8));
    }



}
